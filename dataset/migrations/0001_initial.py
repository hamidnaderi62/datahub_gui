# Generated by Django 5.2.4 on 2025-07-21 04:22

import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PredefinedTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(blank=True, max_length=2000, null=True)),
                ('scope', models.CharField(blank=True, max_length=2000, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnnotationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priceType', models.CharField(blank=True, choices=[('Free', 'Free'), ('Pricing', 'Pricing')], default='Pricing', max_length=50, null=True)),
                ('estimatedPrice', models.FloatField(blank=True, null=True)),
                ('finalPrice', models.FloatField(blank=True, null=True)),
                ('totalFinalPrice', models.FloatField(blank=True, null=True)),
                ('startRecord', models.FloatField(blank=True, null=True)),
                ('endRecord', models.FloatField(blank=True, null=True)),
                ('totalRecords', models.FloatField(blank=True, null=True)),
                ('requestDateTime', models.DateTimeField(auto_now_add=True)),
                ('responseDateTime', models.DateTimeField(blank=True, null=True)),
                ('completeDateTime', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('annotationStatus', models.CharField(blank=True, choices=[('Requested', 'Requested'), ('Accepted', 'Accepted'), ('Completed', 'Completed'), ('Payed', 'Payed'), ('Canceled', 'Canceled')], default='Requested', max_length=50, null=True)),
                ('labelOptions', models.JSONField(blank=True, null=True)),
                ('labelResults', models.JSONField(blank=True, null=True)),
                ('desc', models.TextField(blank=True, null=True)),
                ('tags', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='annotation_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('owner', models.CharField(blank=True, max_length=1000, null=True)),
                ('internalId', models.CharField(blank=True, max_length=300, null=True)),
                ('internalCode', models.CharField(blank=True, max_length=300, null=True)),
                ('recordsNum', models.CharField(blank=True, max_length=10, null=True)),
                ('size', models.CharField(blank=True, max_length=30, null=True)),
                ('format', models.CharField(blank=True, max_length=30, null=True)),
                ('language', models.CharField(blank=True, max_length=30, null=True)),
                ('desc', models.TextField(blank=True, null=True)),
                ('license', models.CharField(blank=True, max_length=100, null=True)),
                ('tasks', models.CharField(blank=True, max_length=1000, null=True)),
                ('datasetDate', models.DateTimeField(blank=True, null=True)),
                ('columnDataType', models.JSONField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('requestRequired', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=50, null=True)),
                ('downloadLink', models.JSONField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('downloadCount', models.IntegerField(blank=True, null=True)),
                ('referenceOwner', models.CharField(blank=True, max_length=500, null=True)),
                ('createType', models.CharField(blank=True, choices=[('Create', 'Create'), ('Transfer', 'Transfer')], default='Create', max_length=50, null=True)),
                ('datasetRate', models.FloatField(blank=True, null=True)),
                ('dataType', models.CharField(blank=True, choices=[('Text', 'Text'), ('Image', 'Image'), ('Audio', 'Audio'), ('Video', 'Video'), ('GeoData', 'GeoData')], default='Text', max_length=50, null=True)),
                ('dataset_tags', models.TextField(blank=True, null=True)),
                ('filesCount', models.IntegerField(blank=True, null=True)),
                ('refLink', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('likes', models.ManyToManyField(blank=True, null=True, related_name='likes', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('sentiment_model', models.CharField(blank=True, max_length=200, null=True)),
                ('sentiment_label', models.CharField(blank=True, max_length=10, null=True)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('Date', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='dataset.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='AnnotationResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True)),
                ('responseType', models.CharField(blank=True, choices=[('Request', 'Request'), ('Accept', 'Accept'), ('Reject', 'Reject'), ('Cancel', 'Cancel')], default='Request', max_length=50, null=True)),
                ('responseDate', models.DateTimeField(blank=True, null=True)),
                ('suggestedPrice', models.FloatField(blank=True, null=True)),
                ('annotationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_responses', to='dataset.annotationrequest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_responses', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_responses', to='dataset.dataset')),
            ],
        ),
        migrations.AddField(
            model_name='annotationrequest',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_requests', to='dataset.dataset'),
        ),
        migrations.CreateModel(
            name='InternationalDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('owner', models.CharField(blank=True, max_length=1000, null=True)),
                ('internalId', models.CharField(blank=True, max_length=300, null=True)),
                ('internalCode', models.CharField(blank=True, max_length=300, null=True)),
                ('recordsNum', models.CharField(blank=True, max_length=10, null=True)),
                ('size', models.CharField(blank=True, max_length=30, null=True)),
                ('format', models.CharField(blank=True, max_length=100, null=True)),
                ('language', models.CharField(blank=True, max_length=30, null=True)),
                ('desc', models.TextField(blank=True, null=True)),
                ('license', models.CharField(blank=True, max_length=100, null=True)),
                ('tasks', models.CharField(blank=True, max_length=1000, null=True)),
                ('datasetDate', models.DateTimeField(blank=True, null=True)),
                ('columnDataType', models.JSONField(blank=True, null=True)),
                ('sourceJson', models.JSONField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('refDownloadLink', models.JSONField(blank=True, null=True)),
                ('downloadLink', models.JSONField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('createType', models.CharField(blank=True, choices=[('Create', 'Create'), ('Transfer', 'Transfer')], default='Transfer', max_length=50, null=True)),
                ('referenceOwner', models.CharField(blank=True, max_length=500, null=True)),
                ('datasetRate', models.FloatField(blank=True, null=True)),
                ('dataType', models.CharField(blank=True, max_length=50, null=True)),
                ('dataset_tags', models.TextField(blank=True, null=True)),
                ('likes', models.IntegerField(blank=True, null=True)),
                ('downloads', models.IntegerField(blank=True, null=True)),
                ('dataset_status', models.CharField(blank=True, choices=[('Initialized', 'Initialized'), ('Download_Progress', 'Download_Progress'), ('Download_Failed', 'Download_Failed'), ('Download_Completed', 'Download_Completed'), ('Transfer', 'Transfer')], default='Initialized', max_length=200, null=True)),
                ('filesCount', models.IntegerField(blank=True, null=True)),
                ('refLink', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='international_datasets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=1000, null=True)),
                ('type', models.CharField(blank=True, choices=[('Paper', 'Paper'), ('Model', 'Model'), ('Service', 'Service'), ('Code', 'Code')], default='Paper', max_length=200, null=True)),
                ('desc', models.TextField(blank=True, null=True)),
                ('productDate', models.DateField(blank=True, null=True)),
                ('link', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='products')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='dataset.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True)),
                ('responseType', models.CharField(blank=True, choices=[('Request', 'Request'), ('Accept', 'Accept'), ('Reject', 'Reject')], default='Request', max_length=50, null=True)),
                ('requestDate', models.DateTimeField(auto_now_add=True)),
                ('responseDate', models.DateTimeField(blank=True, null=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='dataset.dataset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
